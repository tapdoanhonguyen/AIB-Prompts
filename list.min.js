import{ListTypeNo as t}from"./enums.min.js";export class Lists{lists=[];constructor(t=[]){this.lists=t}add(t){this.lists.push(t)}async delete(t){let s=t.ID;await t.delete(),this.lists=this.lists.filter(t=>t.ID!==s)}async create(t,s,i="",e={}){let r=await List.create(t,s,i,e);return this.add(r),r}getFavorites(){return this.withType(t.FAVORITES)}getHidden(){return this.withType(t.HIDDEN)}getCustom(){return this.lists.filter(s=>s.is(t.CUSTOM))}getAIBestPromptsVerified(){return this.withType(t.AIBestPrompts_VERIFIED)}withID(t){return this.lists.find(s=>s.list.ID===t)}withType(t){return this.lists.find(s=>s.is(t))}}export class List{client;list;constructor(t,s){this.client=t,this.list=s}get ID(){return this.list.ID}get Comment(){return this.list.Comment}get Items(){return this.list.Items}get OwnList(){return this.list.OwnList}async update(t){this.list.Comment=t,await this.client.updateList(this.list)}async delete(){await this.client.deleteList(this.list.ID)}async add(t){let s=await this.client.addToList(this.list.ID,t.ID);this.list.Items.push(s)}async remove(t){await this.client.removeFromList(this.list.ID,t.ID),this.list.Items=this.list.Items.filter(s=>s.PromptID!==t.ID)}async has(t){return void 0===this.list.Items&&await this.getListDetails(),this.list.Items.some(s=>s.PromptID===t.ID)}static async create(t,s,i="",e={}){return new List(t,await t.createList(s,i,e))}async getListDetails(){void 0===this.list.Items&&(this.list=await this.client.getListDetails(this.list.ID))}async getPromptIDS(){return void 0===this.list.Items&&await this.getListDetails(),this.list.Items.map(t=>t.PromptID)}is(t){return this.list.ListTypeNo===t}}