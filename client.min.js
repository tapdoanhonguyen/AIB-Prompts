import{APIEndpoint as e,APIEndpointAPP as t}from"./config.min.js";import{ExternalSystemNo as s,VoteTypeNo as r,SortModeNo as o,FeedbackTypeNo as n,MessageVoteTypeNo as i,UsageTypeNo as a,MessageSeverityNo as h,UserStatusNo as p,UserLevelNo as l,SubPromptTypeNo as m,ListTypeNo as d,ListStatusNo as U,ItemStatusNo as y}from"./enums.min.js";import u from"./fingerprint.min.js";import{UserQuota as E}from"./quota.min.js";import{Reaction as P}from"./rxn.min.js";let userFootprintVersion="01";async function generateUserFootprint(){let e=u.load({monitoring:!1}),t=await e,s=await t.get();return`01-${s.visitorId}`}let AIBestPromptsClient={APIEndpoint:e,User:null,UserQuota:null,AppUser:null,AccountSubPrompts:[],async init(){let e=await generateUserFootprint();return fetch("/api/auth/session").then(this.handleResponse).then(t=>{this.User={ExternalID:t.user.id,ExternalSystemNo:s.OPENAI,Email:t.user.email,Name:t.user.name,UserStatusNo:p.UNKNOWN,UserLevelNo:l.UNKNOWN,UserFootprint:e,MaxNewPrivatePromptsAllowed:0,MaxNewPublicPromptsAllowed:0,IsLinked:!1}}).then(()=>this.checkUserStatus())},checkUserStatus(){if(this.User)return fetch(`${this.APIEndpoint}/Users/Status?Email=${this.User.Email}&Name=${this.User.Name}&ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}`).then(this.handleResponse).then(e=>{if(!Object.prototype.hasOwnProperty.call(e,"UserStatusNo"))throw Error("User status response is missing UserStatusNo property.");this.User.UserStatusNo=e.UserStatusNo,Object.prototype.hasOwnProperty.call(e,"UserLevelNo")&&(this.User.UserLevelNo=e.UserLevelNo),Object.prototype.hasOwnProperty.call(e,"MaxNewPrivatePromptsAllowed")&&(this.User.MaxNewPrivatePromptsAllowed=e.MaxNewPrivatePromptsAllowed),Object.prototype.hasOwnProperty.call(e,"MaxNewPublicPromptsAllowed")&&(this.User.MaxNewPublicPromptsAllowed=e.MaxNewPublicPromptsAllowed),Object.prototype.hasOwnProperty.call(e,"IsLinked")&&(this.User.IsLinked=e.IsLinked),Object.prototype.hasOwnProperty.call(e,"AccountSubPrompts")&&Array.isArray(e.AccountSubPrompts)&&(this.AccountSubPrompts=e.AccountSubPrompts),Object.prototype.hasOwnProperty.call(e,"Quota")&&"object"==typeof e.Quota&&(this.UserQuota=new E(this.User,e.Quota)),Object.prototype.hasOwnProperty.call(e,"Name")&&Object.prototype.hasOwnProperty.call(e,"Email")&&(this.AppUser={Name:e.Name,Email:e.Email})}).then(()=>this.UserQuota.fetchMessages())},savePrompt(e){return fetch(`${this.APIEndpoint}/Prompts${e.ID?"/"+e.ID:""}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...e,User:this.User})}).then(this.handleResponse)},getPrompt(e){return fetch(`${this.APIEndpoint}/Prompts/${e}?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}`).then(this.handleResponse)},voteForPrompt(e,t){return fetch(`${this.APIEndpoint}/Vote/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({VoteTypeNo:r.PROMPT_TEASER_THUMBS,Vote:t,User:this.User})}).then(this.handleResponse)},reportPrompt(e,t,s,r){return fetch(`${this.APIEndpoint}/Prompts/${e}/Feedback`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({FeedbackContact:r,FeedbackText:s,FeedbackTypeNo:t,User:this.User})}).then(this.handleResponse)},usePrompt(e,t=t.CLICK){return fetch(`${this.APIEndpoint}/Prompts/${e}/Use`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({UsageTypeNo:t,User:this.User})}).then(this.handleResponse)},deletePrompt(e){return fetch(`${this.APIEndpoint}/Prompts/${e}?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({User:this.User})}).then(this.handleResponse)},getPrompts(e,t=t.TOP_VOTES,s=10,r=0){return fetch(`${this.APIEndpoint}/Prompts?Community=${e}&Limit=${s}&Offset=${r}&OwnerExternalID=${this.User.ExternalID}&OwnerExternalSystemNo=${this.User.ExternalSystemNo}&SortModeNo=${t}&UserFootprint=${this.User.UserFootprint}`).then(this.handleResponse)},getMessages(e){return fetch(`${this.APIEndpoint}/Messages?Community=${e}&ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}`).then(this.handleResponse)},voteForMessage(e,t){return fetch(`${this.APIEndpoint}/Vote/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({VoteTypeNo:t,Vote:t===i.MESSAGE_DISLIKE?-1:1,User:this.User})}).then(this.handleResponse)},confirmMessage(e){return fetch(`${this.APIEndpoint}/Vote/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({VoteTypeNo:r.MESSAGE_CONFIRM,Vote:1,User:this.User})}).then(this.handleResponse)},resetTokens(){this.storeTokens(null)},storeTokens(e){localStorage.setItem("AIBestPrompts.tokens",JSON.stringify(e))},getTokens:()=>JSON.parse(localStorage.getItem("AIBestPrompts.tokens")),fetchWithToken(e,t){let s=this.getTokens();return s&&(s.AccessToken||s.RefreshToken)?fetch(e,{...t,headers:{...t.headers,Authorization:"Bearer "+s.AccessToken}}).then(r=>{if(r.ok)return r;if(401===r.status)return this.refreshToken(s.RefreshToken).then(()=>{let s=this.getTokens();return s&&s.RefreshToken?fetch(e,{...t,headers:{...t.headers,Authorization:"Bearer "+s.AccessToken}}):(this.resetTokens(),Promise.reject(Error("No refresh token stored")))});throw Error("Network response was not OK")}):(this.resetTokens(),Promise.reject(Error("No tokens stored")))},refreshToken(e){return fetch(`${t}/user/tokens`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer "+e}}).then(e=>{if(e.ok)return e.json();throw 401===e.status&&this.resetTokens(),Error("Network response was not OK")}).then(e=>{this.storeTokens(e)})},linkUser(){if(!this.User.IsLinked)return this.fetchWithToken(`${t}/auth/openai/callback`,{method:"POST",body:JSON.stringify({ExternalID:this.User.ExternalID}),headers:{"Content-Type":"application/json"}}).then(this.handleResponse).then(()=>(this.User.IsLinked=!0,!0))},getLists(t=!1){return fetch(`${e}/Lists?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}&Hidden=${t}`,{method:"GET",headers:{"Content-Type":"application/json"}}).then(this.handleResponse)},getListDetails(t){return fetch(`${e}/List/${t}?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}`,{method:"GET",headers:{"Content-Type":"application/json"}}).then(this.handleResponse)},getAllListsWithDetails(){return fetch(`${e}/Lists/All/User?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}`,{method:"GET",headers:{"Content-Type":"application/json"}}).then(this.handleResponse)},createList(t,s="",r={}){let o={User:this.User,ListTypeNo:t,ListStatusNo:U.ACTIVE,ListOrder:0,Comment:s};return r.PromptID&&(o.FirstItem=r),fetch(`${e}/Lists`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}).then(this.handleResponse)},updateList(t){return fetch(`${e}/List/${t.ID}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({User:this.User,ListTypeNo:t.ListTypeNo,ListStatusNo:t.ListStatusNo,ListOrder:t.ListOrder,Comment:t.Comment})}).then(this.handleResponse)},deleteList(t){return fetch(`${e}/List/${t}?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}`,{method:"DELETE",headers:{"Content-Type":"application/json"}}).then(this.handleResponse)},addToList(t,s){return fetch(`${e}/List/${t}/Items`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({PromptID:s,ItemOrder:0,ItemStatusNo:y.ACTIVE,Comment:"",User:this.User})}).then(this.handleResponse)},removeFromList(t,s){return fetch(`${e}/List/${t}/Items/${s}?ExternalID=${this.User.ExternalID}&ExternalSystemNo=${this.User.ExternalSystemNo}&UserFootprint=${this.User.UserFootprint}`,{method:"DELETE",headers:{"Content-Type":"application/json"}}).then(this.handleResponse)},async handleResponse(e){let[t,s]=await Promise.all([e.json(),e.ok]);if(s)return t;if(t&&t.ReactionNo)throw P.mapReactionNo(t.ReactionNo);throw Error("Network response was not OK.")}};export{AIBestPromptsClient,P as Reaction};